// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.26.1
// source: api/wallet/v1/wallet.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWalletCreateWallet = "/api.wallet.v1.Wallet/CreateWallet"
const OperationWalletGetAddress = "/api.wallet.v1.Wallet/GetAddress"
const OperationWalletSignTransaction = "/api.wallet.v1.Wallet/SignTransaction"

type WalletHTTPServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletReply, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressReply, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionReply, error)
}

func RegisterWalletHTTPServer(s *http.Server, srv WalletHTTPServer) {
	r := s.Route("/")
	r.POST("/wallet/create", _Wallet_CreateWallet0_HTTP_Handler(srv))
	r.POST("/wallet/get_address", _Wallet_GetAddress0_HTTP_Handler(srv))
	r.POST("/wallet/sign_transaction", _Wallet_SignTransaction0_HTTP_Handler(srv))
}

func _Wallet_CreateWallet0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletCreateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWallet(ctx, req.(*CreateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWalletReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_GetAddress0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletGetAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressReply)
		return ctx.Result(200, reply)
	}
}

func _Wallet_SignTransaction0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignTransactionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletSignTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignTransaction(ctx, req.(*SignTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignTransactionReply)
		return ctx.Result(200, reply)
	}
}

type WalletHTTPClient interface {
	CreateWallet(ctx context.Context, req *CreateWalletRequest, opts ...http.CallOption) (rsp *CreateWalletReply, err error)
	GetAddress(ctx context.Context, req *GetAddressRequest, opts ...http.CallOption) (rsp *GetAddressReply, err error)
	SignTransaction(ctx context.Context, req *SignTransactionRequest, opts ...http.CallOption) (rsp *SignTransactionReply, err error)
}

type WalletHTTPClientImpl struct {
	cc *http.Client
}

func NewWalletHTTPClient(client *http.Client) WalletHTTPClient {
	return &WalletHTTPClientImpl{client}
}

func (c *WalletHTTPClientImpl) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...http.CallOption) (*CreateWalletReply, error) {
	var out CreateWalletReply
	pattern := "/wallet/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletCreateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...http.CallOption) (*GetAddressReply, error) {
	var out GetAddressReply
	pattern := "/wallet/get_address"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletGetAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...http.CallOption) (*SignTransactionReply, error) {
	var out SignTransactionReply
	pattern := "/wallet/sign_transaction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletSignTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
